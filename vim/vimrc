"Settings {{{

set grepprg=ack
autocmd filetype php set formatoptions+=t
runtime macros/matchit.vim
filetype on
filetype plugin on
syntax enable
set tags=./tags,./.git/tags,../.git/tags
set relativenumber
"vim will treat all numerals as decimals, useful on num<C-a> with numbers like
"007
set nrformats=
set splitbelow
set spell
set completeopt=menu
set backspace=indent,eol,start
set cot+=menuone
set noswapfile
set nobackup
set nowritebackup
set number
set shell=/bin/bash
set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest,list
set ttyfast
set ruler
set laststatus=2
set undodir=/home/jean/.vim/undo//
set undofile
set undolevels=1000
set undoreload=10000
set incsearch
set hlsearch
set ignorecase
set smartcase
set copyindent
set autoindent
set gdefault
set tabstop=4
set shiftwidth=4
set shiftround
set softtabstop=4
set expandtab
set guiheadroom=0
set antialias
"set runtimepath+=/home/jean/.vim/snippets
set mouse=a
set showmatch
set autoread
set smarttab
set history=1000
set title
set visualbell
set cursorline
set wildignore=*.swp,*.back,*.pyc,*.class,*.coverage.*
setlocal formatoptions=1
set complete+=s
set formatprg=par
setlocal linebreak
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:abolish_save_file = '/home/jean/.vim/abbreviations.vim'
set clipboard=unnamedplus
syntax sync minlines=256
autocmd FileType markdown set commentstring=<!!--\ %s\ -->
"CTRLP with regex by default
let g:ctrlp_regexp = 0
":nnoremap <Space> @q
"disable search continuation on edges
"set nowrapscan
"no octal
"performance tweaks
set nocursorcolumn
au FileType markdown setl tw=66
au Filetype markdown setl formatoptions+=t
au FileType TEX setl tw=66
au Filetype TEX setl formatoptions+=t

set list listchars=tab:\ \ ,trail:•
set shortmess+=I

autocmd BufWinEnter * highlight ColorColumn ctermbg=darkred
set colorcolumn=120

set guifont=Consolas\ 12
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set nocompatible

let theme=$THEME
set background=dark
if theme == 'light'
    set background=light
else
    set background=dark
endif

set foldmethod=marker
autocmd BufRead * setlocal foldmethod=marker
autocmd BufRead * normal zM

"}}}

"Plugins {{{
call plug#begin()

"PluginsList"{{{
" Plug 'mtth/scratch.vim'
"Plug '2072/PHP-Indenting-for-VIm'
"Plug 'Shougo/neocomplcache'
"Plug 'Shougo/vimproc', { 'for': [ 'php'] }
"Plug 'Shougo/vimshell'
"Plug 'godlygeek/tabular'
"Plug 'https://github.com/Shougo/unite.vim.git'
"Plug 'joonty/vdebug'
"Plug 'm2mdas/phpcomplete-extended', { 'for': [ 'php'] }
"Plug 'maksimr/vim-translator', { 'for': [ 'md', 'txt'] }
"Plug 'mattn/emmet-vim'
"Plug 'plasticboy/vim-markdown'
"Plug 'scrooloose/syntastic'
"Plug 'tpope/vim-obsession'
"Plug 'vim-scripts/textutil.vim'
"Plug 'mhinz/vim-startify'
"Plug 'wakatime/vim-wakatime'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets', { 'for': [ 'php'] }
Plug 'adoy/vim-php-refactoring-toolbox', { 'for': [ 'php'] }
Plug 'ajh17/VimCompletesMe'
Plug 'altercation/vim-colors-solarized'
Plug 'bkad/CamelCaseMotion'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'coot/vim_args'
Plug 'ervandew/supertab'
Plug 'gcmt/taboo.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'kien/ctrlp.vim'
Plug 'lervag/vimtex', { 'for': ['latex'] }
Plug 'luochen1990/rainbow', { 'for': [ 'php'] }
Plug 'majutsushi/tagbar'
Plug 'michaeljsmith/vim-indent-object'
Plug 'mileszs/ack.vim'
Plug 'nelstrom/vim-visual-star-search'
Plug 'pangloss/vim-javascript', { 'for': [ 'javascript'] }
Plug 'rayburgemeestre/phpfolding.vim'
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/Mark--Karkat'
Plug 'vim-scripts/argtextobj.vim'
Plug 'vim-scripts/closetag.vim', { 'for': [ 'html'] }
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'andreimaxim/vim-io', { 'for': [ 'io'] }
Plug 'chrisbra/BufTimer'
"Plug 'gisraptor/vim-lilypond-integrator'
"}}}

call plug#end()

filetype plugin indent on
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['Blue', 'Magenta', 'DarkGreen', 'DarkYellow'],
\}

"Marks {{{
" Highlight words to avoid in tech writing
" http://css-tricks.com/words-avoid-educational-writing/
runtime plugin/mark.vim
silent MarkClear

"bad words
Mark /\cobviously\|basically\|simply\|of\ scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
Mark /\obviamente\|basicamente\|simplesmente\|com\ certeza\|claramente\|apenas\|mais\|todos\sabem\|entretanto\|então,\|fácil\|bem/


"mark duplicated words and excedent whitespaces
highlight WrongPatterns ctermbg=red guibg=red
autocmd InsertEnter * match WrongPatterns /\w\s\{2,\}\w\|\s\+$\|\v<(\w+)\_s+\1>/
autocmd InsertLeave * match WrongPatterns /\w\s\{2,\}\w\|\s\+$\|\v<(\w+)\_s+\1>/
autocmd BufWinEnter * match WrongPatterns /\w\s\{2,\}\w\|\s\+$\|\v<(\w+)\_s+\1>/
match WrongPatterns /\w\s\{2,\}\w\|\s\+$\|\v<(\w+)\_s+\1>/
autocmd BufWinLeave * call clearmatches()
"end mark text errors"


"}}}

"snippets{{{
augroup load_us
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips')
augroup END

let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabDefaultCompletionType.= "<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
"}}}

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let &runtimepath.=',/home/jean/.vim/plugin/ns9tks-vim-l9-3bb534a720fa'
let &runtimepath.=',/home/jean/.vim/plugin/ns9tks-vim-autocomplpop-13fe3d806464'
let g:ctrlp_max_files=0
"let NERDTreeMouseMode=3
let NERDTreeDirArrows=0
"let NERDTreeMinimalUI=1
let NERDTreeShowLineNumbers=1


autocmd FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP

colorscheme solarized
"set t_Co=16
"let g:solarized_termcolors=16

"}}}

"Mappings {{{
noremap \ ,
let mapleader = "\<space>"
nnoremap <Leader>q :q<CR>
nnoremap <Leader>p :set paste!<CR>
nnoremap <Leader>e :edit!<CR>
nnoremap <Leader>o :only<CR>
inoremap <C-z> <Esc>[s1z=gi
map - ddp
map _ dd2kp
map <leader>spt :set spell spelllang=pt_br<CR>
map <leader>sen :set spell spelllang=en_us<CR>
map <leader>bt :call ToggleBackgroundColour()<CR>
map <leader>me :!chmod +x %<CR>
map <leader>gp :!chmod 777 %<CR>
map <leader>mk :!make<CR>
map <leader>ck :!git checkout %<CR>
nmap <leader>of :!xdg-open % &<CR>
nmap <leader>od :!thunar %:h<CR>
nmap <leader>rmrf :!rm -rf %:p <CR>
nmap <leader>k :NERDTreeToggle<CR>
nmap <leader>pn :!echo %<CR>
nmap <leader>pfn :!echo %:p<CR>
nmap <leader>cfn :!copy %:p<CR>
nmap <leader>c <C-w>v<C-w>l<CR> :VimShell<CR>
nmap <leader>t :TagbarToggle<CR>
nmap <leader>bsc :BlogSaveContent<CR>
nmap <leader>bsm :BlogSaveMeta<CR>
nmap <leader>gk :!gitk %<CR>
nmap <leader>dw \(\<\w\+\>\)\_s*\<\1\><CR>
nmap <silent> <leader>ev :e $MYVIMRC<cr>
nmap <silent> <leader>sv :so $MYVIMRC<cr>
nmap <silent> <leader>sn :e /home/jean/projects/snippet/vim/UltiSnips/php.snippets<cr>
nmap <silent> <leader>snc :e /home/jean/projects/snippet/vim/UltiSnips/php_clipp.snippets<cr>
nnoremap <leader>c :noh<cr>
nnoremap <leader>cc :CtrlPClearAllCaches<cr>
nnoremap <leader><space> :w<cr>
cmap w!! w !sudo tee % >/dev/null
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

au FileType php setl ofu=phpcomplete#CompletePHP
au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
au FileType c setl ofu=ccomplete#CompleteCpp
au FileType css setl ofu=csscomplete#CompleteCSS
"}}}

"Commands {{{
"php{{{
command Phpcsfixer : ! printf "Linter \n" && php -l `pwd`/%
    \ && printf "Csfixer \n" && php-cs-fixer fix `pwd`/%
    \ && printf "Beutifier \n" && phpcbf `pwd`/% --standard=PSR2

function! RunPHPUnitTest(filter)
    cd %:p:h
    if a:filter
        normal! T yw
        let result = system("cgexec -g memory:development phpunit -c ". $PWD ."/phpunit.xml.dist --filter " . @" . " " . bufname("%"))
    else
        let result = system("cgexec -g memory:development phpunit -c ". $PWD . "/phpunit.xml.dist " . bufname("%"))
    endif
    split __PHPUnit_Result__
    normal! ggdG
    setlocal buftype=nofile
    call append(0, split(result, '\v\n'))
    cd -
endfunction

"command Phpmystandard : ! printf "PHP my standard \n" && make-php `pwd`/%
autocmd filetype php nnoremap <leader>s :Phpcsfixer<cr>
"autocmd filetype php nnoremap <leader>m :Phpmystandard<cr>
nnoremap <leader>u :call RunPHPUnitTest(0)<cr>
nnoremap <leader>f :call RunPHPUnitTest(1)<cr>

"}}}

function ToggleBackgroundColour ()
    if (&background == 'light')
        set background=dark
    else
        set background=light
    endif
endfunction

command BlogSaveContent : ! printf "Saving post online \n %:t:r % " && blog-update %:t:r %
command BlogSaveMeta : ! printf "Saving post meta online \n %:t:r % " && blog-meta-update %:t:r %
com! FormatJSON %!python -m json.tool
au BufNewFile *.html 0r /home/jean/projects/snippet/template/html.html
au BufNewFile *.php 0r /home/jean/projects/snippet/template/php.php

function! OnlineDoc()
  if &ft =~ "cpp"
    let s:urlTemplate = "http://doc.trolltech.com/4.1/%.html"
  elseif &ft =~ "ruby"
    let s:urlTemplate = "https://www.google.com.br/?q=ruby+%"
  elseif &ft =~ "php"
    let s:urlTemplate = "http://php.net/manual-lookup.php?pattern=%&scope=quickref"
  elseif &ft =~ "perl"
    let s:urlTemplate = "http://perldoc.perl.org/functions/%.html"
  else
    return
  endif
  let s:browser = "browser"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = substitute(s:urlTemplate, "%", s:wordUnderCursor, "g")
  let s:cmd = "silent !" . s:browser . " " . s:url . "&"
  execute s:cmd
  redraw!
endfunction
" Online doc search.
map <Leader>d :call OnlineDoc()<CR>
map <silent> <M-d> :call OnlineDoc()<CR>

"}}}

